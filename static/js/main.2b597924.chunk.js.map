{"version":3,"sources":["components/earthquake.js","App.js","serviceWorker.js","index.js"],"names":["Earthquake","props","state","posts","loading","fetchEarthquakeData","bind","this","setInterval","setState","fetch","method","headers","then","response","json","console","log","unixDate","myDate","Date","toLocaleString","Spinner","animation","role","map","post","class","unixToDate","statement","name","href","target","variant","tsunami","Button","React","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"4TAIqBA,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACFC,MAAQ,CACXC,MAAM,GACNC,SAAQ,GAEV,EAAKC,oBAAsB,EAAKA,oBAAoBC,KAAzB,gBANX,E,gEAWjBC,KAAKF,sBACLG,YAAYD,KAAKF,oBAAqB,O,sJAMpCE,KAAKE,SAAS,CAACL,SAAQ,IACvBM,MAAM,yFAA0F,CAC5FC,OAAQ,MACRC,QAAS,CAAE,eAAgB,sBAC1BC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC5BF,KAAK,SAASC,GACXE,QAAQC,IAAIH,GACZP,KAAKE,SAAS,CAACN,MAAMW,EAAQ,WAC7BE,QAAQC,IAAIV,KAAKL,MAAMC,MAAM,GAAjB,kBACZI,KAAKE,SAAS,CAACL,SAAQ,KAEzBE,KAAKC,O,uIAGFW,GACP,IAAIC,EAAS,IAAIC,KAAKF,GACtB,OAAO,4BAAKC,EAAOE,oB,+BAGb,IAAD,OAeL,OAAGd,KAAKL,MAAME,QAEN,6BACA,6DACA,kBAACkB,EAAA,EAAD,CAASC,UAAU,SAASC,KAAK,YAQrC,6BACCjB,KAAKL,MAAMC,MAAMsB,KAAI,SAAAC,GAAI,OAE1B,yBAAKC,MAAM,cACP,yBAAKA,MAAM,QACd,EAAKC,WAAWF,EAAI,WAAJ,MACjB,4BAAKA,EAAI,WAAJ,OACL,yCAAeA,EAAI,SAAJ,YAAgC,GAA/C,KAAqDA,EAAI,SAAJ,YAAgC,IA9BzE,SAACG,EAAUC,GACzB,GAAiB,IAAdD,EAEC,OADFb,QAAQC,IAAI,eAAiBY,EAAY,WAAaC,GAEhD,6BACE,4BAAI,yBAAKH,MAAM,eAAX,UAAJ,mCAAyE,uBAAGI,KAAK,2BAA2BC,OAAO,SAASC,QAAQ,WAA3D,eAAzE,oBA0BPC,CAAQR,EAAI,WAAJ,QAA8BA,EAAI,WAAJ,OACvC,kBAACS,EAAA,EAAD,CAAQJ,KAAML,EAAI,WAAJ,IAA4B,OAAQM,OAAO,SAASC,QAAQ,WAA1E,sB,GA1E4BG,IAAMC,W,MCU/BC,MATf,WACE,OACE,yBAAKC,UAAU,OACb,0DACA,kBAAC,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvC,MAAK,SAAAwC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxC,QAAQwC,MAAMA,EAAMC,c","file":"static/js/main.2b597924.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Spinner from 'react-bootstrap/Spinner';\n\nexport default class Earthquake extends React.Component {\n    constructor(props) {\n        super(props);\n       this.state = {\n         posts:[],\n         loading:false\n       };\n       this.fetchEarthquakeData = this.fetchEarthquakeData.bind(this);\n    }\n\n\n    componentDidMount(){\n      this.fetchEarthquakeData()\n      setInterval(this.fetchEarthquakeData, 60000);\n    }\n\n\n\n    async fetchEarthquakeData(){\n        this.setState({loading:true})\n        fetch('https://earthquake.usgs.gov/fdsnws/event/1/query?format=geojson&endtime&minmagnitude=3', {\n            method: 'GET',\n            headers: { 'Content-Type': 'application/json' },\n          }).then(response => response.json())\n          .then(function(response){\n              console.log(response)\n              this.setState({posts:response['features']})\n              console.log(this.state.posts[0]['properties']['title'])\n              this.setState({loading:false})\n\n          }.bind(this));\n    }\n    \n    unixToDate(unixDate){\n        var myDate = new Date(unixDate)\n        return <h2>{myDate.toLocaleString()}</h2>\n    }\n\n    render() {\n\n\n            \n        const tsunami = (statement,name) => {\n          if(statement === 1){\n            console.log(\"statement = \" + statement + \" name = \" + name);\n              return (\n                  <div>\n                    <h2><div class=\"warning-msg\">Alert:</div> Tsunami statement issued check <a href=\"https://www.tsunami.gov/\" target=\"_blank\" variant=\"primary\">tsunami.gov</a> or local media</h2>\n                 </div>\n              )\n          }\n      }\n  \n        if(this.state.loading){\n            return (\n                <div>\n                <h3>Loading Recent Earthquakes...</h3>\n                <Spinner animation=\"border\" role=\"status\">\n                </Spinner>\n                </div>\n                \n            )\n        }\n        return (\n\n            <div>\n            {this.state.posts.map(post =>\n            (\n            <div class=\"eq-content\">\n                <div class=\"info\">\n            {this.unixToDate(post['properties']['time'])}\n            <h2>{post['properties']['title']}</h2>\n            <h2>Location: {post['geometry']['coordinates'][1]}, {post['geometry']['coordinates'][0]}</h2>\n            {tsunami(post['properties']['tsunami'],post['properties']['title'])}\n            <Button href={post['properties']['url'] + \"/map\"} target=\"_blank\" variant=\"primary\">USGS Map</Button>\n            </div>\n             </div>))\n    \n             }\n            </div>\n        );\n    }      \n}","import React from 'react';\nimport './App.css';\nimport Earthquake from './components/earthquake';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Recent Earthquakes >= M3.0</h1>\n      <Earthquake/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}